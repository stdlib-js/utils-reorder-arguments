{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport isNonNegativeIntegerArray from '@stdlib/assert-is-nonnegative-integer-array';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns a function that invokes a provided function with reordered arguments.\n*\n* @param {Function} fcn - input function\n* @param {NonNegativeIntegerArray} indices - argument indices\n* @param {*} [thisArg] - function context\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be an array of nonnegative integers\n* @returns {Function} function with reordered arguments\n*\n* @example\n* function foo( a, b, c ) {\n*     return [ a, b, c ];\n* }\n*\n* var bar = reorderArguments( foo, [ 2, 0, 1 ] );\n*\n* var out = bar( 1, 2, 3 );\n* // returns [ 3, 1, 2 ]\n*/\nfunction reorderArguments( fcn, indices, thisArg ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '1XP3c,J9', fcn ) );\n\t}\n\tif ( !isNonNegativeIntegerArray( indices ) ) {\n\t\tthrow new TypeError( format( '1XPBo,OO', indices ) );\n\t}\n\treturn reordered;\n\n\t/**\n\t* Invokes a function with reordered arguments.\n\t*\n\t* @private\n\t* @param {...*} args - arguments\n\t* @throws {Error} must provide expected number of input arguments\n\t* @returns {*} return value\n\t*/\n\tfunction reordered() {\n\t\tvar args;\n\t\tvar len;\n\t\tvar i;\n\n\t\tlen = arguments.length;\n\t\tif ( len !== indices.length ) {\n\t\t\tthrow new Error( format( '1XPBp,OP', indices.length, len ) );\n\t\t}\n\t\targs = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\targs.push( arguments[ indices[i] ] );\n\t\t}\n\t\treturn fcn.apply( thisArg, args );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default reorderArguments;\n"],"names":["reorderArguments","fcn","indices","thisArg","isFunction","TypeError","format","isNonNegativeIntegerArray","args","len","i","arguments","length","Error","push","apply"],"mappings":";;4SAiDA,SAASA,EAAkBC,EAAKC,EAASC,GACxC,IAAMC,EAAYH,GACjB,MAAM,IAAII,UAAWC,EAAQ,WAAYL,IAE1C,IAAMM,EAA2BL,GAChC,MAAM,IAAIG,UAAWC,EAAQ,WAAYJ,IAE1C,OAUA,WACC,IAAIM,EACAC,EACAC,EAGJ,IADAD,EAAME,UAAUC,UACHV,EAAQU,OACpB,MAAM,IAAIC,MAAOP,EAAQ,WAAYJ,EAAQU,OAAQH,IAGtD,IADAD,EAAO,GACDE,EAAI,EAAGA,EAAID,EAAKC,IACrBF,EAAKM,KAAMH,UAAWT,EAAQQ,KAE/B,OAAOT,EAAIc,MAAOZ,EAASK,EAC3B,CACF"}